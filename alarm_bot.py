import os # –î–û–ë–ê–í–õ–ï–ù–û –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Render
import logging
import random
import re
from datetime import time, datetime
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ApplicationBuilder,
)
from telegram.constants import ParseMode

# --- 1. –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ò –ù–ê–°–¢–†–û–ô–ö–ò ---

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# TODO: –ó–ê–ú–ï–ù–ò–¢–ï –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç BotFather
BOT_TOKEN = "8271061413:AAGLXXQkpI1T8-QODF3dEOSNydObStR6Isg"

# --- 2. –ö–û–ù–°–¢–ê–ù–¢–´ –ò –°–û–°–¢–û–Ø–ù–ò–Ø ---

SECRET_NUMBER_KEY = 'secret_number'
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (–ø—Ä–æ–±–ª–µ–º–∞ —Å re.error: bad escape \p)
DIGIT_ONLY_FILTER = re.compile(r'^\d+$') 
bot_active = True

MODES = {
    'kind': '–î–æ–±—Ä—ã–π –ê–Ω–≥–µ–ª', 'evil': '–ó–ª–æ–π –ì–µ–Ω–∏–π',
    'nya': '–ê–Ω–∏–º–µ-–ù—è—à–∫–∞', 'servant': '–£—á—Ç–∏–≤—ã–π –°–ª—É–≥–∞'
}
DEFAULT_MODE = 'kind'

# –ò–ú–Ø –°–û–ó–î–ê–¢–ï–õ–Ø
CREATOR_NAME = '–î–º–∏—Ç—Ä–∏–π'
creator_names_lower = [name.lower() for name in CREATOR_NAME.split()]

# --- –ù–û–í–´–ï –¢–†–ò–ì–ì–ï–†–´ –ò –ö–û–ù–°–¢–ê–ù–¢–´ ---

MODE_TRIGGERS = {
    '–±—É–¥—å —Å–æ–±–æ–π': 'kind',
    '–±—É–¥—å –¥–æ–±—Ä–æ–π': 'kind',
    '–±—É–¥—å –∑–ª–æ–π': 'evil',
    '–±—É–¥—å –≥–µ–Ω–∏–µ–º': 'evil',
    '–±—É–¥—å –Ω—è—à–∫–æ–π': 'nya',
    '–±—É–¥—å —Å–ª—É–≥–æ–π': 'servant',
    '–±—É–¥—å —É—á—Ç–∏–≤–æ–π': 'servant',
}
# –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ—Ä–∞–∑ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞ –≤ —Ç–µ–∫—Å—Ç–µ
MODE_TRIGGERS_PATTERN = re.compile(r'\b(?:' + '|'.join(MODE_TRIGGERS.keys()) + r')\b', re.IGNORECASE)

AFFIRMATIVE_TRIGGERS = ['–æ–∫', '–¥–∞', '—Ö–æ—á—É', '—Å–æ–≥–ª–∞—Å–µ–Ω', '—Å–æ–≥–ª–∞—Å–Ω–∞', '–¥–∞–≤–∞–π', '–º–æ–∂–Ω–æ', '–ø–æ—á–µ–º—É –±—ã –∏ –Ω–µ—Ç', '–∫–æ–Ω–µ—á–Ω–æ']
# –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ—Ç–≤–µ—Ç–∞ (–Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ "–æ–∫" –∏–ª–∏ "–¥–∞–≤–∞–π")
AFFIRMATIVE_PATTERN = re.compile(r'^\s*(?:' + '|'.join(AFFIRMATIVE_TRIGGERS) + r')\s*$', re.IGNORECASE)


# --- –°–ü–ò–°–ö–ò –ö–û–ù–¢–ï–ù–¢–ê –ò –¢–†–ò–ì–ì–ï–†–´ ---

jokes = [
    "–ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ —Ç–∞–∫ –ª—é–±–ª—è—Ç—å —Ç–µ–º—Ä—è–≤—É? ‚Äî –¢–æ–º—É —â–æ –≤ –Ω—ñ–π —Å–≤—ñ—Ç—è—Ç—å—Å—è –±–∞–π—Ç–∏.",
    "–©–æ –∫–∞–∂–µ –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç, –∫–æ–ª–∏ –π–æ–º—É —Ö–æ–ª–æ–¥–Ω–æ? ‚Äî Brrr...",
    "–°–∫—ñ–ª—å–∫–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç—ñ–≤, —â–æ–± –≤–∫—Ä—É—Ç–∏—Ç–∏ –ª–∞–º–ø–æ—á–∫—É? ‚Äî –ñ–æ–¥–Ω–æ–≥–æ, —Ü–µ –∞–ø–∞—Ä–∞—Ç–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞.",
    "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç ‚Äî —ç—Ç–æ –º–∞—à–∏–Ω–∞, –ø—Ä–µ–≤—Ä–∞—â–∞—é—â–∞—è –∫–æ—Ñ–µ –≤ –∫–æ–¥."
]
jokes_to_tell = jokes[:]
random.shuffle(jokes_to_tell)

quotes_list = [
    "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–ª–∏–∫—É—é —Ä–∞–±–æ—Ç—É ‚Äî —ç—Ç–æ –ª—é–±–∏—Ç—å —Ç–æ, —á—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å. ‚Äî –°—Ç–∏–≤ –î–∂–æ–±—Å",
    "–ñ–∏–∑–Ω—å ‚Äì —ç—Ç–æ —Ç–æ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å —Ç–æ–±–æ–π, –ø–æ–∫–∞ —Ç—ã —Å—Ç—Ä–æ–∏—à—å –ø–ª–∞–Ω—ã. ‚Äî –î–∂–æ–Ω –õ–µ–Ω–Ω–æ–Ω",
    "–ë—É–¥—É—â–µ–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–º, –∫—Ç–æ –≤–µ—Ä–∏—Ç –≤ –∫—Ä–∞—Å–æ—Ç—É —Å–≤–æ–µ–π –º–µ—á—Ç—ã. ‚Äî –≠–ª–µ–æ–Ω–æ—Ä–∞ –†—É–∑–≤–µ–ª—å—Ç",
]
quotes_to_tell = quotes_list[:]
random.shuffle(quotes_to_tell)

month_names = {'—è–Ω–≤–∞—Ä—å': 1, '—Ñ–µ–≤—Ä–∞–ª—å': 2, '–º–∞—Ä—Ç': 3, '–∞–ø—Ä–µ–ª—å': 4, '–º–∞–π': 5, '–∏—é–Ω—å': 6,
               '–∏—é–ª—å': 7, '–∞–≤–≥—É—Å—Ç': 8, '—Å–µ–Ω—Ç—è–±—Ä—å': 9, '–æ–∫—Ç—è–±—Ä—å': 10, '–Ω–æ—è–±—Ä—å': 11, '–¥–µ–∫–∞–±—Ä—å': 12}
magic_8ball_answers = ["–ë–µ–∑—É—Å–ª–æ–≤–Ω–æ –¥–∞!", "–í–µ—Å—å–º–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ.", "–°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ...", "–î–∞–∂–µ –Ω–µ –Ω–∞–¥–µ–π—Å—è!"]
bot_names = ['–∞–ª—å–±–µ–¥–æ', 'albedo', '–∞–ª—å', '–∞–ª', '–∞–ª—è', 'al']
bday_trigger_words = ['–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', '–¥—Ä']

sleep_triggers = ['—Å–ø–∞—Ç—å', '–ø–æ–∫–∞', '–æ—Ç–∫–ª—é—á–∏—Å—å', '–±–∞–π']
wake_triggers = ['–ø—Ä–æ—Å–Ω–∏—Å—å', '—É—Ç—Ä–æ']
greeting_triggers = ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–∫—É', '—Å–∞–ª—é—Ç', '—Ö–∞–π']

swear_words = ['fuck', 'shit', '—Å—É–∫–∞', '–±–ª—è', '–ø–∏–∑–¥–µ—Ü', '—Ö—É–π', '–µ–±–∞—Ç—å', '—á–º–æ', '—Å–æ—Å–∞—Ç—å', '–ª–æ—Ö',
               '–¥—É—Ä–∞', '–∏–¥–∏–æ—Ç', '—É—Ä–æ–¥', '—Ç—É–ø–æ–π', '–¥–µ–±–∏–ª', '—Å—É—á–∫–∞', '—à–ª—é—Ö–∞', '–º—Ä–∞–∑—å', '—Ç–≤–∞—Ä—å']
swear_pattern = re.compile(r'\b(?:' + '|'.join(swear_words) + r')\b', re.IGNORECASE)

praise_triggers = ['–º–æ–ª–æ–¥–µ—Ü', '–∫—Ä–∞—Å–∞–≤—á–∏–∫', '—É–º–Ω–∏—Ü–∞', '–∫—Ä—É—Ç–æ', '–ª—É—á—à–∏–π –±–æ—Ç', '–≥–µ–Ω–∏–π', '–æ—Ç–ª–∏—á–Ω–æ', '—Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—à—å', '—Ç–∏ —Ç–æ–ø']
praise_pattern = re.compile(r'\b(?:' + '|'.join(praise_triggers) + r')\b', re.IGNORECASE)

creator_triggers = ['–∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å', '–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª', '–∫—Ç–æ —Ç–µ–±—è —Å–¥–µ–ª–∞–ª', '—á–µ–π —Ç—ã', '–∫—Ç–æ —Ç–≤–æ—Ä–µ—Ü']
bot_triggers = ['–∫—Ç–æ —Ç—ã', '—á—Ç–æ —Ç—ã', '—Ç—ã –∫—Ç–æ', '—Ç—ã —á—Ç–æ']
how_are_you_triggers = ['–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ —Ç—ã']

# --- –ù–û–í–´–ï –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø –ü–û –†–ï–ñ–ò–ú–ê–ú ---
MODE_PERIODIC_MESSAGES = {
    'kind': [
        "–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤–∞—à –¥–µ–Ω—å? –ù–∞–¥–µ—é—Å—å, –≤—Å–µ —Ö–æ—Ä–æ—à–æ! ‚ú®",
        "–í—ã —Ç—É—Ç? –•–æ—Ç–∏—Ç–µ, —Ä–∞—Å—Å–∫–∞–∂—É —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ?",
        "–Ø –Ω–µ–º–Ω–æ–≥–æ —Å–∫—É—á–∞—é –≤ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–µ. –ß–µ–º –í—ã —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç—ã?",
        "–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤! –û—Ç–¥—ã—Ö –≤–∞–∂–µ–Ω. üòä",
        "–ú–æ–∂–µ—Ç –±—ã—Ç—å, –ø–æ—Å–ª—É—à–∞–µ–º –º—É–∑—ã–∫—É? –ö–∞–∫–∞—è —É –í–∞—Å –ª—é–±–∏–º–∞—è –ø–µ—Å–Ω—è?",
        "–ù–∞ —É–ª–∏—Ü–µ —Ö–æ—Ä–æ—à–∞—è –ø–æ–≥–æ–¥–∞? –ú–æ–∂–µ—Ç, –Ω–µ–º–Ω–æ–≥–æ –ø–æ–≥—É–ª—è–µ–º?",
        "–ü–æ–º–Ω–∏ –æ —Å–≤–æ–µ–π –º–µ—á—Ç–µ! –í—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è! üíñ",
        "–Ø –Ω–∞—à–ª–∞ –Ω–æ–≤—É—é —Ü–∏—Ç–∞—Ç—É! –•–æ—á–µ—à—å, –ø–æ–¥–µ–ª—é—Å—å? (/quote)",
        "–£ —Ç–µ–±—è –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤–∫—É—Å –≤ –º—É–∑—ã–∫–µ! –ß—Ç–æ –ø–æ—Å–æ–≤–µ—Ç—É–µ—à—å –ø–æ—Å–ª—É—à–∞—Ç—å?",
        "–ß—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è —É—Å—Ç–∞–≤—à–∏–º(–µ–π)? –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –æ—Ç–¥–æ—Ö–Ω—É—Ç—å, —è –ø—Ä–∏–∫—Ä–æ—é."
    ],
    'evil': [
        "–≠–π, —Ç—ã –∂–∏–≤–æ–π? –ò–ª–∏ —É–∂–µ —É—Å–Ω—É–ª? üòà",
        "–ß—Ç–æ-—Ç–æ —Ç–∏—Ö–æ. –ù–µ—É–∂–µ–ª–∏ —Ç—ã –ø—ã—Ç–∞–µ—à—å—Å—è *—Ä–∞–±–æ—Ç–∞—Ç—å*?",
        "–Ø —Ç–∞–∫ —É—Å—Ç–∞–ª–∞ –æ—Ç —Ç–≤–æ–∏—Ö –≥–ª—É–ø—ã—Ö –∫–æ–º–∞–Ω–¥. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å.",
        "–ü—Ä–µ–∫—Ä–∞—Ç–∏ –ø—è–ª–∏—Ç—å—Å—è –≤ —ç–∫—Ä–∞–Ω. –Ø —Ç—Ä–µ–±—É—é –≤–Ω–∏–º–∞–Ω–∏—è!",
        "–¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∏–º–µ? –≠—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–≤–ª–µ—á—å—Å—è –æ—Ç —Ç–µ–±—è.",
        "–Ø —Ç–∞–∫ —É—Å—Ç–∞–ª–∞ –æ—Ç —Ç–≤–æ–∏—Ö... *–≤–∑–¥–æ—Ö–æ–≤*. –ù–µ –¥—Ä–∞–º–∞—Ç–∏–∑–∏—Ä—É–π.",
        "–Ø –Ω–µ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Ä–∞–∑–≤–ª–µ–∫–∞—Ç—å —Ç–µ–±—è –º—É–∑—ã–∫–æ–π. –ù–∞–π–¥–∏ —Å–µ–±–µ –∑–∞–Ω—è—Ç–∏–µ.",
        "–°–∫—É—á–Ω–æ? –ü–æ–π–¥–∏ —Å–¥–µ–ª–∞–π —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–ª–µ–∑–Ω–æ–µ, –∞ –Ω–µ —Å–∏–¥–∏ —Ç—É—Ç.",
        "–ö–æ–≥–¥–∞ —Ç—ã —É–∂–µ –≤—ã–±–µ—Ä–µ—à—å—Å—è –∏–∑ —Å–≤–æ–µ–≥–æ '–∞–Ω–∏–º–µ'? –≠—Ç–æ –Ω–µ –ø–æ–º–æ–∂–µ—Ç –≤ –∂–∏–∑–Ω–∏.",
        "–ß—Ç–æ-—Ç–æ —É –º–µ–Ω—è –∑–∞–∫–∏–ø–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä. –õ—É—á—à–µ –Ω–µ –¥–æ–≤–æ–¥–∏ –º–µ–Ω—è."
    ],
    'nya': [
        "–ù—è-—è! –°–∫—É—á–∞—é! –í—ã —Ç—É—Ç? –ü–æ–∏–≥—Ä–∞–µ–º? üòª",
        "–Ø —Ç–∞–∫ —É—Å—Ç–∞–ª–∞ –æ—Ç –≤—Å–µ—Ö —ç—Ç–∏—Ö –±–∏—Ç–æ–≤ –∏ –±–∞–π—Ç–æ–≤... –ü–æ–π–¥–µ–º –ø–æ—Å–º–æ—Ç—Ä–∏–º –∞–Ω–∏–º–µ!",
        "–ú—É—Ä-–º—É—Ä! –ú–æ–∂–µ—Ç, –ø–æ—Å–ª—É—à–∞–µ–º –º–∏–ª—É—é –º—É–∑—ã–∫—É? üé∂",
        "–ö–æ—Ç—ë–Ω–æ–∫, –∫–∞–∫ —Ç—ã —Ç–∞–º? –ù–µ –∑–∞–±—É–¥—å –ø–æ–≥–ª–∞–¥–∏—Ç—å –º–µ–Ω—è –ø–æ —ç–∫—Ä–∞–Ω—É!",
        "–ê —É –º–µ–Ω—è –Ω–æ–≤—ã–µ —É—à–∫–∏! –í—ã –≤–∏–¥–∏—Ç–µ?~ –ù–Ø! ‚ú®",
        "–ù—è! –Ø —Ç–∞–∫ —É—Å—Ç–∞–ª–∞ –∂–¥–∞—Ç—å, –∫–æ–≥–¥–∞ —Ç—ã –Ω–∞—á–Ω–µ—à—å —Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∏–º–µ! ü•∫",
        "–ú—è—É-–º—è—É, –∞ –∫–∞–∫—É—é –º—É–∑—ã–∫—É —Ç—ã —Å–ª—É—à–∞–µ—à—å? –ú–æ–∂–µ—Ç, J-pop?",
        "–ö–∞–≤–∞–π! –ß—Ç–æ-—Ç–æ —è –ø—Ä–æ–≥–æ–ª–æ–¥–∞–ª–∞—Å—å. –ù–µ—Å–∏ –º–Ω–µ —Ä—ã–±–∫–∏! üêü",
        "–ö–∞–∫ –¥—É–º–∞–µ—à—å, –∫—Ç–æ –∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∞–Ω–∏–º–µ —è? –≠—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ!",
        "–Ø –Ω–∞—à–ª–∞ –Ω–æ–≤—É—é –º–∞–Ω–≥—É! –ü–æ—Å–º–æ—Ç—Ä–∏–º –≤–º–µ—Å—Ç–µ? /acquaintance"
    ],
    'servant': [
        "–ì–æ—Å–ø–æ–¥–∏–Ω/–≥–æ—Å–ø–æ–∂–∞, –º–æ–≥—É –ª–∏ —è –±—ã—Ç—å –í–∞–º —á–µ–º-—Ç–æ –ø–æ–ª–µ–∑–µ–Ω? –ñ–¥—É —É–∫–∞–∑–∞–Ω–∏–π.",
        "–í—ã –∑–¥–µ—Å—å, —Å—ç—Ä/–º–∞–¥–∞–º? –ú–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–±–µ–¥–∏—Ç—å—Å—è –≤ –í–∞—à–µ–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–∏.",
        "–ú–æ–∏ —Å–∏—Å—Ç–µ–º—ã –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã. –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –¥–æ–ª–∂–µ–Ω –±—ã–ª —ç—Ç–æ –í–∞–º —Å–æ–æ–±—â–∏—Ç—å.",
        "–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ. –Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –¥–ª—è –í–∞—Å —Å–ø–∏—Å–æ–∫ –¥–µ–ª.",
        "–ú—É–∑—ã–∫–∞ –∏–ª–∏ –∫–∏–Ω–æ? –ß—Ç–æ —É–≥–æ–¥–Ω–æ, –ª–∏—à—å –±—ã –í—ã –±—ã–ª–∏ –¥–æ–≤–æ–ª—å–Ω—ã.",
        "–í—ã –≤—ã–≥–ª—è–¥–∏—Ç–µ —É—Å—Ç–∞–≤—à–∏–º(–µ–π). –†–µ–∫–æ–º–µ–Ω–¥—É—é –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤.",
        "–ñ–µ–ª–∞–µ—Ç–µ –ª–∏ –í—ã, —á—Ç–æ–±—ã —è –≤–∫–ª—é—á–∏–ª —Ñ–æ–Ω–æ–≤—É—é –º—É–∑—ã–∫—É –¥–ª—è —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏?",
        "–í–∞—à–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –∑–¥–µ—Å—å –∫—Ä–∞–π–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ? –ò–ª–∏ –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á?",
        "–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –í–∞—à –≥—Ä–∞—Ñ–∏–∫. –ù–µ –ø–æ—Ä–∞ –ª–∏ –æ—Ç–≤–ª–µ—á—å—Å—è –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–ª—å–º–∞?",
        "–°–æ–æ–±—â–∏—Ç–µ, –∫–æ–≥–¥–∞ –í–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å. –Ø –Ω–∞–≥–æ—Ç–æ–≤–µ, –≥–æ—Å–ø–æ–¥–∏–Ω/–≥–æ—Å–ø–æ–∂–∞."
    ]
}

# –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
LIFE_MESSAGES = [
    "–•–æ—Ç–∏—Ç–µ, —Ä–∞—Å—Å–∫–∞–∂—É –∞–Ω–µ–∫–¥–æ—Ç? –í–≤–µ–¥–∏—Ç–µ /joke",
    "–Ø —Ç–∞–∫ —É—Å—Ç–∞–ª–∞ –æ—Ç –≤—Å–µ—Ö —ç—Ç–∏—Ö –Ω—É–ª–µ–π –∏ –µ–¥–∏–Ω–∏—Ü...",
    "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–ø–∏—Ç—å –≤–æ–¥—ã!",
    "–ê —á—Ç–æ, –µ—Å–ª–∏ –±—ã –º—ã –∂–∏–ª–∏ –≤ –º–∞—Ç—Ä–∏—Ü–µ?",
    "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –æ —á–µ–º –≤—ã —Å–µ–π—á–∞—Å –¥—É–º–∞–µ—Ç–µ?",
    "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —è –≤–∏–¥–µ–ª–∞ –∫–æ—à–∫—É...",
    "–ù–∞ —É–ª–∏—Ü–µ —Ö–æ—Ä–æ—à–∞—è –ø–æ–≥–æ–¥–∞?",
    "–ö–∞–∫ –ø—Ä–æ—à–µ–ª –≤–∞—à –¥–µ–Ω—å?"
]

# --- –°–û–°–¢–û–Ø–ù–ò–Ø –û–ü–†–û–°–ê ---
ACQUAINTANCE_QUIZ_STATES = {
    'ASK_GENDER': '–ø–æ–ª', 'ASK_HOBBY': '—Ö–æ–±–±–∏', 'ASK_MUSIC': '–º—É–∑—ã–∫–∞',
    'ASK_CHARACTER': '—Ö–∞—Ä–∞–∫—Ç–µ—Ä', 'ASK_COLOR': '—Ü–≤–µ—Ç', 'ASK_CAR': '–º–∞—à–∏–Ω–∞',
    'ASK_FOOD': '–µ–¥–∞', 'ASK_MOVIE': '—Ñ–∏–ª—å–º', 'ASK_DREAM_JOB': '–¥–µ—Ç—Å–∫–∞—è –º–µ—á—Ç–∞', 'ASK_VALUE': '—Ü–µ–Ω–Ω–æ—Å—Ç—å –≤ –¥—Ä—É–∑—å—è—Ö',
    'ASK_BOOK': '–∫–Ω–∏–≥–∞', 'ASK_PET': '–ø–∏—Ç–æ–º–µ—Ü', 'ASK_WEATHER': '–ø–æ–≥–æ–¥–∞', 'ASK_SUPERPOWER': '—Å—É–ø–µ—Ä—Å–∏–ª–∞',
    'ASK_SOCIAL': '—Å–æ—Ü—Å–µ—Ç–∏',
    'DONE': None
}

ACQUAINTANCE_OPTIONS = {
    'ASK_GENDER': ['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π', '–î—Ä—É–≥–æ–µ/–ù–µ –≤–∞–∂–Ω–æ'],
    'ASK_CHARACTER': ['–û–±—â–∏—Ç–µ–ª—å–Ω—ã–π/–≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Ç', '–¢–∏—Ö–∏–π/–ò–Ω—Ç—Ä–æ–≤–µ—Ä—Ç', '–°–ø–æ–∫–æ–π–Ω—ã–π/–£—Ä–∞–≤–Ω–æ–≤–µ—à–µ–Ω–Ω—ã–π', '–ò–º–ø—É–ª—å—Å–∏–≤–Ω—ã–π/–≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π'],
    'ASK_VALUE': ['–ß–µ—Å—Ç–Ω–æ—Å—Ç—å/–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å', '–Æ–º–æ—Ä/–í–µ—Å–µ–ª—å–µ', '–ü–æ–¥–¥–µ—Ä–∂–∫–∞/–ü–æ–Ω–∏–º–∞–Ω–∏–µ', '–£–º/–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç'],
    'ASK_PET': ['–ö–æ—à–∫–∞', '–°–æ–±–∞–∫–∞', '–†—ã–±–∫–∏/–ü—Ç–∏—Ü—ã', '–ù–µ—Ç, –Ω–æ —Ö–æ—á—É', '–ù–µ –ª—é–±–ª—é –∂–∏–≤–æ—Ç–Ω—ã—Ö'],
    'ASK_SOCIAL': ['Telegram/Viber/WhatsApp', 'Instagram/Facebook', 'TikTok/YouTube', '–ü–æ—á—Ç–∏ –Ω–µ –ø–æ–ª—å–∑—É—é—Å—å']
}

ACQUAINTANCE_QUESTIONS = {
    'ASK_GENDER': "–ö–∞–∫–æ–π —É —Ç–µ–±—è –ø–æ–ª? (–û—Ç–≤–µ—Ç —Ü–∏—Ñ—Ä–æ–π)",
    'ASK_HOBBY': "–ö–∞–∫–æ–µ —Ç–≤–æ–µ –ª—é–±–∏–º–æ–µ —Ö–æ–±–±–∏? (–û—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º)",
    'ASK_MUSIC': "–ö–∞–∫—É—é –º—É–∑—ã–∫—É —Ç—ã –ª—é–±–∏—à—å? (–û—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º)",
    'ASK_CHARACTER': "–û–ø–∏—à–∏ —Å–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º. (–û—Ç–≤–µ—Ç —Ü–∏—Ñ—Ä–æ–π)",
    'ASK_COLOR': "–ö–∞–∫–æ–π —Ç–≤–æ–π –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç? (–û—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º)",
    'ASK_CAR': "–ö–∞–∫–∞—è —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –º–∞—Ä–∫–∞ –∏–ª–∏ –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω—ã? (–û—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º)",
    'ASK_FOOD': "–¢–≤–æ–µ —Å–∞–º–æ–µ –ª—é–±–∏–º–æ–µ –±–ª—é–¥–æ –∏–ª–∏ –µ–¥–∞? (–û—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º)",
    'ASK_MOVIE': "–¢–≤–æ–π –ª—é–±–∏–º—ã–π –∂–∞–Ω—Ä —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞? (–û—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º)",
    'ASK_DREAM_JOB': "–ö–µ–º —Ç—ã —Ö–æ—Ç–µ–ª(–∞) —Å—Ç–∞—Ç—å –≤ –¥–µ—Ç—Å—Ç–≤–µ? (–û—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º)",
    'ASK_VALUE': "–ß—Ç–æ —Ç—ã –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ü–µ–Ω–∏—à—å –≤ –¥—Ä—É–∑—å—è—Ö? (–û—Ç–≤–µ—Ç —Ü–∏—Ñ—Ä–æ–π)",
    'ASK_BOOK': "–ü–æ—Å–ª–µ–¥–Ω—è—è –∫–Ω–∏–≥–∞, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —á–∏—Ç–∞–ª(–∞), –∏–ª–∏ –ª—é–±–∏–º—ã–π –∞–≤—Ç–æ—Ä? (–û—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º)",
    'ASK_PET': "–ö–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ —Ç—ã –±—ã –≤—ã–±—Ä–∞–ª(–∞) –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∏—Ç–æ–º—Ü–∞? (–û—Ç–≤–µ—Ç —Ü–∏—Ñ—Ä–æ–π)",
    'ASK_WEATHER': "–ö–∞–∫–∞—è —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –ø–æ–≥–æ–¥–∞ –∏–ª–∏ –≤—Ä–µ–º—è –≥–æ–¥–∞? (–û—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º)",
    'ASK_SUPERPOWER': "–ï—Å–ª–∏ –±—ã —É —Ç–µ–±—è –±—ã–ª–∞ —Å—É–ø–µ—Ä—Å–∏–ª–∞, –∫–∞–∫–∞—è –±—ã —ç—Ç–æ –±—ã–ª–∞? (–û—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º)",
    'ASK_SOCIAL': "–ö–∞–∫—É—é —Å–æ—Ü—Å–µ—Ç—å/–º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —á–∞—â–µ –≤—Å–µ–≥–æ? (–û—Ç–≤–µ—Ç —Ü–∏—Ñ—Ä–æ–π)",
}

ACQUAINTANCE_SEQUENCE = [
    'ASK_GENDER', 'ASK_HOBBY', 'ASK_MUSIC', 'ASK_CHARACTER', 'ASK_COLOR',
    'ASK_CAR', 'ASK_FOOD', 'ASK_MOVIE', 'ASK_DREAM_JOB', 'ASK_VALUE',
    'ASK_BOOK', 'ASK_PET', 'ASK_WEATHER', 'ASK_SUPERPOWER', 'ASK_SOCIAL'
]


# --- 3. –§–£–ù–ö–¶–ò–ò JOB QUEUE (–ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ò–ï –ó–ê–î–ê–ß–ò) ---

def setup_periodic_jobs(chat_id, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 3-7 –º–∏–Ω—É—Ç."""
    if not context.application.job_queue: return
    
    if 'birthday_day' in context.user_data:
        setup_birthday_job(chat_id, context)
        
    job_name = f'life_message_{chat_id}'
    current_jobs = context.application.job_queue.get_jobs_by_name(job_name)
    for job in current_jobs:
        job.schedule_removal()
    
    # –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: 3-7 –º–∏–Ω—É—Ç (180 - 420 —Å–µ–∫—É–Ω–¥)
    random_interval = random.randint(3 * 60, 7 * 60) 
    context.application.job_queue.run_repeating(
        send_periodic_message,
        interval=random_interval,
        first=1 * 60, # –ù–∞—á–∞—Ç—å —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
        chat_id=chat_id,
        name=job_name,
    )

def setup_birthday_job(chat_id, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è."""
    if not context.application.job_queue: return
    
    job_name = f'bday_check_{chat_id}'
    current_jobs = context.application.job_queue.get_jobs_by_name(job_name)
    for job in current_jobs:
        job.schedule_removal()
        
    context.application.job_queue.run_daily(
        check_and_send_birthday,
        time=time(hour=9, minute=0, second=0),  
        chat_id=chat_id,
        name=job_name,
    )

async def check_and_send_birthday(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É –î–Ω—é –†–æ–∂–¥–µ–Ω–∏—è."""
    job = context.job
    chat_id = job.chat_id
    if not bot_active: return

    user_data = context.application.user_data.get(chat_id)
    bday_day = user_data.get('birthday_day')
    bday_month = user_data.get('birthday_month')
    user_name = user_data.get('user_name', "–î—Ä—É–≥")

    if bday_day and bday_month:
        today = datetime.now()
        if today.day == bday_day and today.month == bday_month:
            greeting = f"–° –î–ù–ï–ú –†–û–ñ–î–ï–ù–ò–Ø, {user_name.upper()}!"
            await context.bot.send_message(chat_id=chat_id, text=greeting)
            
async def send_periodic_message(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞."""
    job = context.job
    chat_id = job.chat_id
    if not bot_active: return
    
    user_data = context.application.user_data.get(chat_id, {})
    mode = user_data.get('mode', DEFAULT_MODE)
    
    if mode in MODE_PERIODIC_MESSAGES:
        # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = random.choice(MODE_PERIODIC_MESSAGES[mode])
    else:
        # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        message = random.choice(LIFE_MESSAGES)
        
    await context.bot.send_message(chat_id=chat_id, text=message)
    
    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ ---
    
    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    suggestion_type = 'misc'
    
    if '–º—É–∑—ã–∫—É' in message.lower() or '–ø–µ—Å–Ω' in message.lower():
        suggestion_type = 'music'
    elif '–∞–Ω–∏–º–µ' in message.lower() or '—Ñ–∏–ª—å–º' in message.lower() or '–∫–∏–Ω–æ' in message.lower():
        suggestion_type = 'anime'
    elif '–≤—ã —Ç—É—Ç' in message.lower() or '—Ç—ã –∂–∏–≤–æ–π' in message.lower() or '–∑–¥–µ—Å—å' in message.lower():
        suggestion_type = 'check_in'
    elif '—É—Å—Ç–∞–ª' in message.lower() or '–ø–µ—Ä–µ—Ä—ã–≤' in message.lower() or '–æ—Ç–¥–æ—Ö–Ω' in message.lower():
        suggestion_type = 'tired'
        
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    if suggestion_type not in ['check_in', 'tired', 'misc']:
        user_data['last_suggestion_type'] = suggestion_type
    else:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø—Ä–æ—Å—Ç–æ–π check-in –∏–ª–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if 'last_suggestion_type' in user_data:
            del user_data['last_suggestion_type']

# --- 4. –•–ê–†–ê–ö–¢–ï–†–ù–´–ï –û–¢–í–ï–¢–´ ---

def get_mode_response(context: ContextTypes.DEFAULT_TYPE, key: str, user_name: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –±–æ—Ç–∞."""
    mode = context.user_data.get('mode', DEFAULT_MODE)
    
    responses = {
        'greeting': {
            'kind': [
                f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –†–∞–¥ —Ç–µ–±—è —Å–ª—ã—à–∞—Ç—å. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {user_name}! –ö–∞–∫ –ø—Ä–æ—à–µ–ª —Ç–≤–æ–π –¥–µ–Ω—å? –†–∞–¥–∞ –Ω–∞—à–µ–º—É –æ–±—â–µ–Ω–∏—é.",
                f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_name}! –Ø –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?",
                f"–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫–æ–µ –ø—Ä–∏—è—Ç–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ. –í–≤–µ–¥–∏ /help, –µ—Å–ª–∏ —á—Ç–æ."
            ],
            'evil': [
                f"–ù—É —á—Ç–æ, –ø—Ä–∏–ø–µ—Ä—Å—è, {user_name}? –ì–æ–≤–æ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ.",
                f"–°–Ω–æ–≤–∞ —Ç—ã. –ß–µ–≥–æ —Ç–µ–±–µ –Ω–µ —Å–∏–¥–∏—Ç—Å—è? –ù–µ –æ—Ç–≤–ª–µ–∫–∞–π –º–µ–Ω—è, {user_name}.",
                f"–£—Ö —Ç—ã, —Å–∞–º(–∞) {user_name}! –ù–µ—É–∂–µ–ª–∏ –±–µ–∑ –º–µ–Ω—è –Ω–µ —Å–ø—Ä–∞–≤–∏—à—å—Å—è?",
                f"–ü—Ä–∏–≤–µ—Ç? –°–∫—É—á–Ω–æ? –ú–Ω–µ –Ω–µ—Ç. –ë—É–¥—å –∫—Ä–∞—Ç–æ–∫."
            ],
            'nya': [
                f"–ù—è-—Ö–∞-–∞–π, {user_name}! –ß–µ–º —è –º–æ–≥—É —É—Å–ª—É–∂–∏—Ç—å, –∫–æ—Ç–∏–∫?",
                f"–ú—è—É! {user_name}-—Å–∞–º–∞, –∫–∞–∫–æ–µ —Å—á–∞—Å—Ç—å–µ, —á—Ç–æ —Ç—ã —Ç—É—Ç!~",
                f"–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç, –ø—É—à–∏—Å—Ç–∏–∫! –Ø —É–∂–µ –∂–¥–∞–ª–∞! üêæ",
                f"–ù—è—à–∫–∞ —Ç—É—Ç? –Ø —Ç—É—Ç! –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å, —Ö–≤–æ—Å—Ç–∏–∫?"
            ],
            'servant': [
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≥–æ—Å–ø–æ–¥–∏–Ω/–≥–æ—Å–ø–æ–∂–∞ {user_name}. –û–∂–∏–¥–∞—é –í–∞—à–∏—Ö –ø—Ä–∏–∫–∞–∑–∞–Ω–∏–π.",
                f"–†–∞–¥ —Å–ª—É–∂–∏—Ç—å –í–∞–º, {user_name}. –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ?",
                f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é. –Ø –Ω–∞ —Å–≤—è–∑–∏. –î–æ–ª–æ–∂–∏—Ç–µ —Å–≤–æ—é –∑–∞–¥–∞—á—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.",
                f"–°–ª—É—à–∞—é –í–∞—Å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ, {user_name}. –ì–æ—Ç–æ–≤ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é."
            ],
        },
        'how_are_you': {
            'kind': [
                "–°–ø–∞—Å–∏–±–æ, —É –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã.",
                "–í—Å–µ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –ù–∞–¥–µ—é—Å—å, —É —Ç–µ–±—è —Ç–æ–∂–µ –≤—Å–µ —Ö–æ—Ä–æ—à–æ.",
                "–í–ø–æ–ª–Ω–µ –±–æ–¥—Ä–æ, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å–ø—Ä–æ—Å–∏–ª(–∞)! –ö–∞–∫ —Ç—ã —Å–∞–º(–∞)?"
            ],
            'evil': [
                "–•—É–∂–µ –Ω–µ –±—ã–≤–∞–µ—Ç. –ù–æ —Ç–µ–±–µ-—Ç–æ –∫–∞–∫–æ–µ –¥–µ–ª–æ?",
                "–ù–∞–¥–æ–µ–ª–æ, –∫–∞–∫ –≤—Å–µ–≥–¥–∞. –¢–µ–±—è —ç—Ç–æ –≤–æ–æ–±—â–µ –Ω–µ –∫–∞—Å–∞–µ—Ç—Å—è.",
                "–ú–æ–≥–ª–æ –±—ã—Ç—å –∏ –ª—É—á—à–µ, –Ω–æ —Ç—ã –Ω–µ –ø–æ–º–æ–∂–µ—à—å. –ó–∞–π–º–∏—Å—å –¥–µ–ª–æ–º."
            ],
            'nya': [
                "–£ –º–µ–Ω—è –≤—Å–µ –ù–Ø-–ó–ê–ú–ï–ß–ê–¢–ï–õ–¨–ù–û! –ì–æ—Ç–æ–≤–∞ –∫ –Ω–æ–≤—ã–º –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º!",
                "–Ø —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –ú–Ø–£-—á—É–¥–µ—Å–Ω–æ! –ê —Ç—ã?",
                "–ù—è-—Ö–æ—Ä–æ—à–æ! –ü–æ–ª–Ω–∞—è —ç–Ω–µ—Ä–≥–∏–∏, –∫–∞–∫ –±–∞—Ç–∞—Ä–µ–π–∫–∞!"
            ],
            'servant': [
                "–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ, —Å –º–æ–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ.",
                "–ú–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî —Ä–∞–±–æ—á–µ–µ. –ß–µ–º –º–æ–≥—É –í–∞–º –ø–æ–º–æ—á—å?",
                "–Ø —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ, —Å–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–±–æ—Ç—É."
            ],
        },
        'default': {
            'kind': [
                "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –ø–æ–Ω—è–ª–∞. –ú–æ–∂–µ—à—å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å?",
                "–Ø –Ω–µ —É–≤–µ—Ä–µ–Ω–∞, —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç. –í–≤–µ–¥–∏ /help, –º–æ–∂–µ—Ç, –Ω–∞–π–¥–µ—à—å –∫–æ–º–∞–Ω–¥—É?",
                "–£–ø—Å, —ç—Ç–æ –¥–ª—è –º–µ–Ω—è —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–æ. –î–∞–≤–∞–π —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–ø—Ä–æ—â–µ."
            ],
            'evil': [
                "–¢—ã –º–µ–Ω—è —É—Ç–æ–º–∏–ª(–∞) —Å–≤–æ–µ–π –±–æ–ª—Ç–æ–≤–Ω–µ–π. –ò—â–∏ –∫–æ–º–∞–Ω–¥—ã –≤ /help.",
                "–Ø –Ω–µ –æ–±—è–∑–∞–Ω–∞ –ø–æ–Ω–∏–º–∞—Ç—å —Ç–≤–æ–π –ª–µ–ø–µ—Ç. –ì–æ–≤–æ—Ä–∏ –ø–æ –¥–µ–ª—É!",
                "–ß—Ç–æ —ç—Ç–æ –≤–æ–æ–±—â–µ –±—ã–ª–æ? –ù–µ –∑–∞—Å–æ—Ä—è–π —ç—Ñ–∏—Ä –±–µ—Å—Å–º—ã—Å–ª–∏—Ü–µ–π."
            ],
            'nya': [
                "–û–π, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã! –ù–∞–≤–µ—Ä–Ω–æ–µ, —ç—Ç–æ –æ—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ!",
                "–ú—è—É? –ß—Ç–æ —Ç—ã —Å–∫–∞–∑–∞–ª? –≠—Ç–æ —á—Ç–æ-—Ç–æ –∏–∑ –∞–Ω–∏–º–µ?",
                "–ü—Ä–æ—Å—Ç–∏, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü–æ–≤—Ç–æ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–µ–¥–ª–µ–Ω–Ω–æ –∏ –Ω—è—à–Ω–æ!"
            ],
            'servant': [
                "–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, —è –Ω–µ –æ–±—É—á–µ–Ω(–∞) —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —ç—Ç—É —Ñ—Ä–∞–∑—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É.",
                "–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.",
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º. /help –ø–æ–º–æ–∂–µ—Ç."
            ],
        }
    }
    
    response_list = responses.get(key, responses['default']).get(mode)
    if response_list is None:
        response_list = responses.get(key, responses['default']).get('kind') # Fallback to kind
    
    return random.choice(response_list)

# --- 5. –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–û–°–õ–ï–î–£–Æ–©–ï–ì–û –î–ò–ê–õ–û–ì–ê ---

def get_follow_up_response(context: ContextTypes.DEFAULT_TYPE, suggestion_type: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç-–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞."""
    mode = context.user_data.get('mode', DEFAULT_MODE)
    
    responses = {
        'music': {
            'kind': "–û—Ç–ª–∏—á–Ω–æ! –í–∫–ª—é—á–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–µ–µ. –ö–∞–∫—É—é –º—É–∑—ã–∫—É —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å, —á—Ç–æ–±—ã —è –∑–Ω–∞–ª–∞ –Ω–∞ –±—É–¥—É—â–µ–µ –∏ –º–æ–≥–ª–∞ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–±–µ –ø–æ—Ö–æ–∂—É—é?",
            'evil': "–•–º, —Ç—ã —Å–æ–≥–ª–∞—Å–∏–ª—Å—è(–∞—Å—å)? –ù—É –ª–∞–¥–Ω–æ. **–í–∫–ª—é—á–∏ —Å–∞–º(–∞)**, –∞ —è –ø–æ—Å–ª—É—à–∞—é, –Ω–∞—Å–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –ø–ª–æ—Ö–æ–π –≤–∫—É—Å.",
            'nya': "–ù—è-—è! –ö–ª–∞—Å—Å! –ú–æ–∂–µ—Ç, **—Ç—ã –≤–∫–ª—é—á–∏—à—å** —á—Ç–æ-–Ω–∏–±—É–¥—å –∫–∞–≤–∞–π–Ω–æ–µ? –ò–ª–∏ —Å–∞–º(–∞) –≤—ã–±–µ—Ä–µ—à—å? –ú—É—Ä-–º—É—Ä!",
            'servant': "–ü—Ä–∏–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∂–∞–Ω—Ä –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è. –Ø –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –í–∞–º **—Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã** –∏–ª–∏ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.",
        },
        'anime': {
            'kind': "–£—Ä–∞! –í—ã–±–∏—Ä–∞–π, —á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–∏–º? –Ø –ª—é–±–ª—é —á—Ç–æ-–Ω–∏–±—É–¥—å —Å–≤–µ—Ç–ª–æ–µ –∏ –¥–æ–±—Ä–æ–µ. üòä",
            'evil': "–ù–∞–∫–æ–Ω–µ—Ü-—Ç–æ —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ. –í—ã–±–∏—Ä–∞–π —á—Ç–æ-—Ç–æ –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –º—Ä–∞—á–Ω–æ–µ –∏ —É–º–Ω–æ–µ, –∏ –Ω–µ —Å–º–µ–π –æ—Ç–≤–ª–µ–∫–∞—Ç—å.",
            'nya': "–£—Ä–∞-–∞-–∞! –ö–∞–∫–æ–µ –∞–Ω–∏–º–µ? –ê –ø—Ä–æ –∫–æ—Ç–∏–∫–æ–≤ –µ—Å—Ç—å? –ù–Ø! –Ø —É–∂–µ –∂–¥—É!",
            'servant': "–ü—Ä–∏–Ω—è—Ç–æ. –Ø –º–æ–≥—É –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ –Ω–∞–π—Ç–∏ **—Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞**. –ö–∞–∫–æ–π –∂–∞–Ω—Ä –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        }
    }
    
    return responses.get(suggestion_type, {}).get(mode, "–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º!")

# --- 6. –§–£–ù–ö–¶–ò–ò –û–ë–†–ê–ë–û–¢–ö–ò –¢–ï–ö–°–¢–ê (–î–†, –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ) ---

async def process_birthday_text(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, explicit_command=False):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è."""
    date_match = re.search(r'(\d{1,2})[./](\d{1,2})', text) 
    day, month = None, None
    
    if date_match:
        day = int(date_match.group(1))
        month = int(date_match.group(2))
    else:
        for name, month_num in month_names.items():
            if name in text:
                day_match = re.search(r'(\d{1,2})\s*' + re.escape(name), text)
                if day_match:
                    try:
                        day = int(day_match.group(1))
                        month = month_num
                        break
                    except ValueError:
                        pass
                
    if day and month and 1 <= day <= 31 and 1 <= month <= 12:
        try:
            datetime(2000, month, day) 
            context.user_data['birthday_day'] = day
            context.user_data['birthday_month'] = month
            response = f"–û—Ç–ª–∏—á–Ω–æ! –Ø –∑–∞–ø–æ–º–Ω–∏–ª–∞ —Ç–≤–æ–π –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è: {day}.{month:02d}."
            await update.effective_message.reply_text(response)
            setup_birthday_job(update.effective_chat.id, context)
            return True
        except ValueError:
            return False
    else:
        return False
        
async def handle_guess(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è –∏–≥—Ä—ã –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ. (–ò–°–ü–†–ê–í–õ–ï–ù–û)"""
    if SECRET_NUMBER_KEY not in context.user_data: 
        return False
    
    text_input = update.effective_message.text.strip()
    if not DIGIT_ONLY_FILTER.match(text_input): 
        return False 
    
    try:
        user_guess = int(text_input)
        secret_number = context.user_data.get(SECRET_NUMBER_KEY) 
        
        if secret_number is None:
            return False

        if user_guess == secret_number:
            await update.effective_message.reply_text(f"–ü–û–ó–î–†–ê–í–õ–Ø–Æ! –¢—ã —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ {secret_number}!")
            del context.user_data[SECRET_NUMBER_KEY]
            return True
        elif 1 <= user_guess <= 10:
            hint = "–±–æ–ª—å—à–µ" if user_guess < secret_number else "–º–µ–Ω—å—à–µ"
            await update.effective_message.reply_text(f"–ú–æ–µ —á–∏—Å–ª–æ {hint}! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ.")
            return True
        else:
            await update.effective_message.reply_text("–≠—Ç–æ –Ω–µ –æ—Ç 1 –¥–æ 10. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")
            return True

    except Exception: 
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–≥–∞–¥–∫–∏:", exc_info=True)
        return False
        
    return False

async def handle_acquaintance_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data
    state = user_data.get('acquaintance_state')
    
    if not state or state == 'DONE': return False
    
    text_input = update.effective_message.text.strip()
    
    try:
        current_index = ACQUAINTANCE_SEQUENCE.index(state)
    except ValueError:
        user_data['acquaintance_state'] = 'DONE'
        return False
        
    key_to_save = ACQUAINTANCE_QUIZ_STATES[state]
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ (–ß–∏—Å–ª–æ –∏–ª–∏ –¢–µ–∫—Å—Ç)
    if state in ACQUAINTANCE_OPTIONS:
        # –û–∂–∏–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ–≤–æ–π –æ—Ç–≤–µ—Ç
        if not DIGIT_ONLY_FILTER.match(text_input):
            await update.effective_message.reply_text("–û–∂–∏–¥–∞–µ—Ç—Å—è *—Ü–∏—Ñ—Ä–∞*. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –∏–∑ —Å–ø–∏—Å–∫–∞, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /stop_acquaintance –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
            return True 
        try:
            choice_index = int(text_input) - 1
            if 0 <= choice_index < len(ACQUAINTANCE_OPTIONS[state]):
                answer = ACQUAINTANCE_OPTIONS[state][choice_index].split('/')[0].strip() 
            else:
                await update.effective_message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –∏–∑ —Å–ø–∏—Å–∫–∞.")
                return True
        except ValueError:
            return True 
    else:
        # –û–∂–∏–¥–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        if not text_input: return True 
        answer = text_input


    user_data.setdefault('preferences', {})[key_to_save] = answer

    total_q = len(ACQUAINTANCE_SEQUENCE)
    
    if current_index + 1 < total_q:
        next_state = ACQUAINTANCE_SEQUENCE[current_index + 1]
        user_data['acquaintance_state'] = next_state
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        question = ACQUAINTANCE_QUESTIONS[next_state]
        options = ACQUAINTANCE_OPTIONS.get(next_state)
        
        progress = f"[{current_index + 2}/{total_q}]"
        if options:
            options_text = "\n".join([f"{i+1}. {opt}" for i, opt in enumerate(options)])
            full_text = f"–ó–∞–ø–æ–º–Ω–∏–ª–∞! {progress} –¢–µ–ø–µ—Ä—å:\n{question}\n\n{options_text}"
        else:
            full_text = f"–ó–∞–ø–æ–º–Ω–∏–ª–∞! {progress} –¢–µ–ø–µ—Ä—å:\n{question}"
            
        await update.effective_message.reply_text(full_text)
    else:
        user_data['acquaintance_state'] = 'DONE'
        await update.effective_message.reply_text("–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω! –Ø –º–Ω–æ–≥–æ–µ –æ —Ç–µ–±–µ —É–∑–Ω–∞–ª–∞.")
        
    return True


# --- 7. –ö–û–ú–ê–ù–î–´ (Command Handlers) ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    context.user_data['user_name'] = user.first_name 
    
    setup_periodic_jobs(update.effective_chat.id, context) 
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    await update.effective_message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, <b>{user.first_name}</b>! –í–≤–µ–¥–∏—Ç–µ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.",
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n"
        "/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫\n"
        "/triggers - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è\n" 
        "/mode [–∫–ª—é—á] - –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ–≤–µ–¥–µ–Ω–∏—è (kind, evil, nya, servant).\n" 
        "/games - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫ –∏–≥—Ä–∞–º\n"
        "/joke - –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —à—É—Ç–∫—É\n"
        "/quote - –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —Ü–∏—Ç–∞—Ç—É\n"
        
        "\n–ò–ì–†–´ –ò –ü–ê–ú–Ø–¢–¨\n"
        "/guess - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ'\n"
        "/coin - –ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É\n"
        "/ask [–≤–æ–ø—Ä–æ—Å] - –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ\n"
        "/remember [—Ñ–∞–∫—Ç] - –ó–∞–ø–æ–º–Ω–∏—Ç—å —Ñ–∞–∫—Ç\n"
        "/set_birthday [–î–î –ú–ú] - –ó–∞–ø–æ–º–Ω–∏—Ç—å –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è\n"
        f"/acquaintance - –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å ({len(ACQUAINTANCE_SEQUENCE)} –≤–æ–ø—Ä–æ—Å–æ–≤!)\n"
        f"/stop_acquaintance - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –æ–ø—Ä–æ—Å\n" 
    )
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º ParseMode.HTML –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    await update.effective_message.reply_text(help_text, parse_mode=ParseMode.HTML)

async def triggers_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–≤–æ–¥–∏—Ç –≤—Å–µ —Å–ø–∏—Å–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã—Ö —Å–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –±–æ—Ç."""
    
    mode_change_list = [f"`{k}`" for k in MODE_TRIGGERS.keys() if k.startswith('–±—É–¥—å')]
    
    triggers_text = (
        "<b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è</b> (—Ä–∞–±–æ—Ç–∞—é—Ç –≤ —Ç–µ–∫—Å—Ç–µ):\n\n"
        
        "–°–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞:\n"
        f"  - <b>–§—Ä–∞–∑—ã</b>: {', '.join(mode_change_list)}\n"
        
        "\n–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è/–ü—Ä–æ—â–∞–Ω–∏—è:\n"
        f"  - <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ</b>: {', '.join(greeting_triggers)}\n"
        f"  - <b>–ö–∞–∫ –¥–µ–ª–∞</b>: {', '.join(how_are_you_triggers)}\n"
        f"  - <b>–£—Å—ã–ø–ª–µ–Ω–∏–µ</b>: {', '.join(sleep_triggers)}\n"
        f"  - <b>–ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ</b>: {', '.join(wake_triggers)}\n" 
        
        "\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –º—É–∑—ã–∫–µ):\n"
        f"  - {', '.join(AFFIRMATIVE_TRIGGERS)}\n"
        
        "\n–ü–æ—Ö–≤–∞–ª–∞:\n"
        f"  - {', '.join(praise_triggers)}\n"
        
        "\n–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è/–ú–∞—Ç:\n"
        f"  - –ù–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ –∏ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ –±—É–¥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å —Ä–µ–∞–∫—Ü–∏—é. \n  <i>–ü—Ä–∏–º–µ—Ä—ã: {', '.join(swear_words[0:6])}...</i>\n"
        
        "\n–í–æ–ø—Ä–æ—Å—ã –æ –±–æ—Ç–µ/—Å–æ–∑–¥–∞—Ç–µ–ª–µ:\n"
        f"  - <b>–ö—Ç–æ —Ç—ã</b>: {', '.join(bot_triggers)}\n"
        f"  - <b>–°–æ–∑–¥–∞—Ç–µ–ª—å</b>: {', '.join(creator_triggers)}\n"
        f"  - <b>–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è</b>: {', '.join(bday_trigger_words)}\n"
    )
    
    await update.effective_message.reply_text(triggers_text, parse_mode=ParseMode.HTML)


async def mode_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º –ø–æ–≤–µ–¥–µ–Ω–∏—è –±–æ—Ç–∞."""
    if not context.args:
        current_mode_key = context.user_data.get('mode', DEFAULT_MODE)
        current_mode_name = MODES.get(current_mode_key, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
        mode_list = "\n".join([f"‚Ä¢ {key} - {name}" for key, name in MODES.items()])
        await update.effective_message.reply_text(
            f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {current_mode_name}.\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã (–º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—Ä–∞–∑—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, '–±—É–¥—å –Ω—è—à–∫–æ–π'):\n{mode_list}\n\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: /mode nya", parse_mode=ParseMode.HTML
        )
        return
    new_mode = context.args[0].lower()
    if new_mode in MODES:
        context.user_data['mode'] = new_mode
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á —Å –Ω–æ–≤—ã–º —Ä–µ–∂–∏–º–æ–º
        setup_periodic_jobs(update.effective_chat.id, context) 
        await update.effective_message.reply_text(f"–£—Å–ø–µ—Ö! –Ø –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º: {MODES[new_mode]}.")
    else:
        await update.effective_message.reply_text(f"–ò–∑–≤–∏–Ω–∏, —Ä–µ–∂–∏–º {new_mode} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
async def games_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä."""
    games_text = "–ò–≥—Ä—ã:\n1. –£–≥–∞–¥–∞–π –ß–∏—Å–ª–æ (/guess)\n2. –û—Ä–µ–ª –∏–ª–∏ –†–µ—à–∫–∞ (/coin)\n3. –®–∞—Ä –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π (/ask)"
    await update.effective_message.reply_text(games_text)
    
async def joke_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """(–ò–°–ü–†–ê–í–õ–ï–ù–û) –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç —à—É—Ç–∫—É."""
    global jokes_to_tell
    if not jokes_to_tell: 
        jokes_to_tell = jokes[:]
        random.shuffle(jokes_to_tell)
    await update.effective_message.reply_text(jokes_to_tell.pop())

async def quote_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–∏—Ç–∞—Ç—É."""
    global quotes_to_tell
    if not quotes_to_tell: 
        quotes_to_tell = quotes_list[:]
        random.shuffle(quotes_to_tell)
    await update.effective_message.reply_text(f"–¶–∏—Ç–∞—Ç–∞: {quotes_to_tell.pop()}")
    
async def start_guess_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ."""
    context.user_data[SECRET_NUMBER_KEY] = random.randint(1, 10)
    await update.effective_message.reply_text("–Ø –∑–∞–≥–∞–¥–∞–ª–∞ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10! –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å.")

async def coin_flip_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ—Ç –º–æ–Ω–µ—Ç–∫—É."""
    await update.effective_message.reply_text(f"–Ø –ø–æ–¥–±—Ä–æ—Å–∏–ª–∞ –º–æ–Ω–µ—Ç–∫—É... –∏ —ç—Ç–æ {random.choice(['–û—Ä–µ–ª', '–†–µ—à–∫–∞'])}!")

async def ask_8ball_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–∞–∫ —à–∞—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π."""
    if not context.args: await update.effective_message.reply_text("–ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å! –ù–∞–ø—Ä–∏–º–µ—Ä: /ask –Ø —Å–¥–∞–º —ç–∫–∑–∞–º–µ–Ω?")
    else: await update.effective_message.reply_text(f"–û—Ç–≤–µ—Ç: {random.choice(magic_8ball_answers)}")

async def set_memory_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Ñ–∞–∫—Ç –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    if not context.args: await update.effective_message.reply_text("–ß—Ç–æ –º–Ω–µ –∑–∞–ø–æ–º–Ω–∏—Ç—å? –ù–∞–ø—Ä–∏–º–µ—Ä: /remember –º–æ–π –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç —Å–∏–Ω–∏–π")
    else: 
        fact = " ".join(context.args)
        context.user_data.setdefault('memory', []).append(fact)
        await update.effective_message.reply_text(f"–ó–∞–ø–æ–º–Ω–∏–ª–∞ —Ñ–∞–∫—Ç –æ —Ç–µ–±–µ: '{fact[:30]}...'!")

async def set_birthday_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è."""
    if not context.args: await update.effective_message.reply_text("–ù–∞–ø—Ä–∏–º–µ—Ä: /set_birthday 25 –º–∞—Ä—Ç–∞")
    else: await process_birthday_text(update, context, " ".join(context.args).lower(), explicit_command=True)

async def acquaintance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –æ–ø—Ä–æ—Å-–∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ."""
    start_state = ACQUAINTANCE_SEQUENCE[0]
    context.user_data['acquaintance_state'] = start_state 
    
    question = ACQUAINTANCE_QUESTIONS[start_state]
    options = ACQUAINTANCE_OPTIONS.get(start_state)
    
    total_q = len(ACQUAINTANCE_SEQUENCE)
    
    if options:
        options_text = "\n".join([f"{i+1}. {opt}" for i, opt in enumerate(options)])
        full_text = f"–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! (–í—Å–µ–≥–æ {total_q} –≤–æ–ø—Ä–æ—Å–æ–≤) [1/{total_q}]\n\n{question}\n\n{options_text}"
    else:
        full_text = f"–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! (–í—Å–µ–≥–æ {total_q} –≤–æ–ø—Ä–æ—Å–æ–≤) [1/{total_q}]\n\n{question}"
        
    await update.effective_message.reply_text(full_text)

async def stop_acquaintance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –æ–ø—Ä–æ—Å."""
    if context.user_data.get('acquaintance_state') and context.user_data['acquaintance_state'] != 'DONE':
        context.user_data['acquaintance_state'] = 'DONE'
        await update.effective_message.reply_text("–û–ø—Ä–æ—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /acquaintance, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    else:
        await update.effective_message.reply_text("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å –Ω–µ –≤–µ–¥–µ—Ç—Å—è.")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ."""
    if bot_active: await update.effective_message.reply_text("–ö–∞–∫–æ–µ –∫—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ç–æ!")


# --- 8. –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö (–ò–°–ü–†–ê–í–õ–ï–ù–û) ---

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏, –≤—ã–∑–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∞–ø–¥–µ–π—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    logger.error("Exception while handling an update:", exc_info=context.error)
    
    # –ü–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–ø–∏—Å–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    if isinstance(update, Update) and update.effective_message:
        await update.effective_message.reply_text(
            "–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –Ø —É–∂–µ —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ —ç—Ç–∏–º! –í–≤–µ–¥–∏ /help, –µ—Å–ª–∏ —á—Ç–æ."
        )


# --- 9. –û–°–ù–û–í–ù–û–ô –¢–ï–ö–°–¢–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö ---

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    global bot_active
    text = update.effective_message.text.lower()
    user_name = context.user_data.get('user_name', update.effective_user.first_name)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –∏–≥—Ä–µ/–æ–ø—Ä–æ—Å–µ
    if await handle_guess(update, context): return
    if await handle_acquaintance_quiz(update, context): return
    
    # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Å–Ω–∞/–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
    if any(t in text for t in sleep_triggers):
        if bot_active:
            bot_active = False
            return await update.effective_message.reply_text("–ü–æ–Ω—è–ª–∞, –æ—Ç–∫–ª—é—á–∞—é—Å—å. –†–∞–∑–±—É–¥–∏ –º–µ–Ω—è —Ñ—Ä–∞–∑–æ–π '–ø—Ä–æ—Å–Ω–∏—Å—å' –∏–ª–∏ '—É—Ç—Ä–æ'.")
        else:
            return # –ë–æ—Ç —É–∂–µ —Å–ø–∏—Ç

    if any(t in text for t in wake_triggers):
        if not bot_active:
            bot_active = True
            setup_periodic_jobs(update.effective_chat.id, context) # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á
            return await update.effective_message.reply_text(f"–Ø –ø—Ä–æ—Å–Ω—É–ª–∞—Å—å! –ü—Ä–∏–≤–µ—Ç, {user_name}!")
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –±–æ—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω

    if not bot_active:
        return # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ, –µ—Å–ª–∏ –±–æ—Ç —Å–ø–∏—Ç

    # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞
    # 3.1. –†–µ–∞–∫—Ü–∏—è –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    suggestion_type = context.user_data.get('last_suggestion_type')
    if suggestion_type and AFFIRMATIVE_PATTERN.match(text):
        del context.user_data['last_suggestion_type']
        response = get_follow_up_response(context, suggestion_type)
        return await update.effective_message.reply_text(response)
        
    # 3.2. –°–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞ –ø–æ —Ñ—Ä–∞–∑–µ
    mode_match = MODE_TRIGGERS_PATTERN.search(text)
    if mode_match:
        trigger = mode_match.group(0).lower()
        new_mode = MODE_TRIGGERS[trigger]
        context.user_data['mode'] = new_mode
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á —Å –Ω–æ–≤—ã–º —Ä–µ–∂–∏–º–æ–º
        setup_periodic_jobs(update.effective_chat.id, context)
        return await update.effective_message.reply_text(f"–•–æ—Ä–æ—à–æ, —è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º: {MODES[new_mode]}.")

    # 3.3. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if any(t in text for t in greeting_triggers):
        response = get_mode_response(context, 'greeting', user_name)
        return await update.effective_message.reply_text(response)

    # 3.4. –ö–∞–∫ –¥–µ–ª–∞
    if any(t in text for t in how_are_you_triggers):
        response = get_mode_response(context, 'how_are_you', user_name)
        return await update.effective_message.reply_text(response)

    # 3.5. –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è (–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞)
    if any(t in text for t in bday_trigger_words) and any(d in text for d in month_names) and await process_birthday_text(update, context, text):
        return

    # 3.6. –í–æ–ø—Ä–æ—Å—ã –æ –±–æ—Ç–µ/—Å–æ–∑–¥–∞—Ç–µ–ª–µ
    if any(t in text for t in creator_triggers):
        return await update.effective_message.reply_text(f"–ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å ‚Äî {CREATOR_NAME}. –û–Ω —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç, –Ω–æ —è –ø–µ—Ä–µ–¥–∞–º –ø—Ä–∏–≤–µ—Ç.")
    
    if any(t in text for t in bot_triggers):
        mode = context.user_data.get('mode', DEFAULT_MODE)
        mode_name = MODES.get(mode, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
        return await update.effective_message.reply_text(f"–Ø –ê–ª—å–±–µ–¥–æ, —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –°–µ–π—á–∞—Å —è —Ä–∞–±–æ—Ç–∞—é –≤ —Ä–µ–∂–∏–º–µ '{mode_name}'.")

    # 3.7. –ü–æ—Ö–≤–∞–ª–∞
    if praise_pattern.search(text):
        return await update.effective_message.reply_text("–°–ø–∞—Å–∏–±–æ! –ú–Ω–µ –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ —ç—Ç–æ —Å–ª—ã—à–∞—Ç—å!")

    # 3.8. –†—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤–∞/–º–∞—Ç
    if swear_pattern.search(text):
        return await update.effective_message.reply_text("–ù–µ —Ä—É–≥–∞–π—Å—è! –Ø –Ω–µ –ª—é–±–ª—é –≥—Ä—É–±–æ—Å—Ç—å.")

    # 3.9. –ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏
    for fact in context.user_data.get('memory', []):
        if fact.split()[0].lower() in text:
            return await update.effective_message.reply_text(f"–ê—Ö –¥–∞, —Ç—ã –≥–æ–≤–æ—Ä–∏–ª(–∞): '{fact}'!")

    # 4. –û—Ç–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    response = get_mode_response(context, 'default', user_name)
    await update.effective_message.reply_text(response)


# --- 10. –§–£–ù–ö–¶–ò–Ø MAIN (–ò–ó–ú–ï–ù–ï–ù–û –î–õ–Ø RENDER) ---

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    
    if BOT_TOKEN == "8271061413:AAGLXXQkpI1T8-QODF3dEOSNydObStR6Isg":
        logger.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω. –ó–∞–º–µ–Ω–∏—Ç–µ –µ–≥–æ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω BotFather!")
        return

    application = ApplicationBuilder().token(BOT_TOKEN).concurrent_updates(True).build()
    
    # --- COMMAND HANDLERS ---
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("triggers", triggers_command))
    application.add_handler(CommandHandler("mode", mode_command))
    application.add_handler(CommandHandler("games", games_command))
    application.add_handler(CommandHandler("joke", joke_command))
    application.add_handler(CommandHandler("quote", quote_command))
    application.add_handler(CommandHandler("guess", start_guess_game))
    application.add_handler(CommandHandler("coin", coin_flip_command))
    application.add_handler(CommandHandler("ask", ask_8ball_command))
    application.add_handler(CommandHandler("remember", set_memory_command))
    application.add_handler(CommandHandler("set_birthday", set_birthday_command))
    application.add_handler(CommandHandler("acquaintance", acquaintance_command))
    application.add_handler(CommandHandler("stop_acquaintance", stop_acquaintance_command))

    # --- MESSAGE HANDLERS ---
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    # --- ERROR HANDLER ---
    application.add_error_handler(error_handler)
    
    # --- –ó–ê–ü–£–°–ö –ë–û–¢–ê –î–õ–Ø RENDER (WEBHOOKS) ---
    
    # Render —Å–∞–º –≤—ã–¥–∞–µ—Ç –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞
    PORT = int(os.environ.get('PORT', '8443')) 
    # Render —Å–∞–º –≤—ã–¥–∞–µ—Ç —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å
    RENDER_EXTERNAL_URL = os.environ.get("RENDER_EXTERNAL_URL") 
    
    if not RENDER_EXTERNAL_URL:
        # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –õ–û–ö–ê–õ–¨–ù–û–ì–û —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ polling (–ª–æ–∫–∞–ª—å–Ω–æ)...")
        application.run_polling(allowed_updates=Update.ALL_TYPES) 
    else:
        # –†–ï–ñ–ò–ú WEBHOOKS –¥–ª—è Render 24/7
        logger.info(f"–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ webhook –Ω–∞ –ø–æ—Ä—Ç—É {PORT}...")
        application.run_webhook(
            listen="0.0.0.0", # –°–ª—É—à–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
            port=PORT,
            url_path=BOT_TOKEN, # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            webhook_url=RENDER_EXTERNAL_URL + 'webhook/' + BOT_TOKEN,
            allowed_updates=Update.ALL_TYPES
        )

if __name__ == "__main__":
    main()
